//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/Controls/Control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Control : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Control()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Control"",
    ""maps"": [
        {
            ""name"": ""Map"",
            ""id"": ""fd10b179-014e-4170-98e2-cd1fc70640c2"",
            ""actions"": [
                {
                    ""name"": ""Move Walk"",
                    ""type"": ""Value"",
                    ""id"": ""0fae1992-c624-4216-b254-ca3fa7e23e19"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e0649dbb-501c-46a5-8a0f-fc16f9f4ca1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""d5e98cf2-b26c-4123-9173-9dc08ff12317"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot Aim"",
                    ""type"": ""Value"",
                    ""id"": ""04598797-ee46-4cd0-9faf-7bc09dae5104"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot Aim With Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""8f386db2-804f-44e3-9c7d-26ba19f00659"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Melee"",
                    ""type"": ""Button"",
                    ""id"": ""66a0c89a-6957-4b2b-a612-8262446edce3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Version Switch Minor"",
                    ""type"": ""Button"",
                    ""id"": ""e208c253-8267-4012-9dbf-56b5c474febb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Version Switch Major"",
                    ""type"": ""Button"",
                    ""id"": ""c9ee8236-fbf8-41e2-9053-4b69eb91a420"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Mouse and Keyboard"",
                    ""id"": ""f550eb24-b676-4c6f-a781-98c925b8c92e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4dbc4834-5608-4c31-ab96-fdea0c504710"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""6a737af8-e368-41fb-8606-aec49ab59f3c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""d9e3cafc-faf4-4075-9e3d-cbbdb2243146"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fc6d177e-8fbd-4c0c-bc07-c5da436c0997"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c21829f8-cec5-47ca-97d2-c2e297685f46"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1604981e-2502-4e8e-a1c7-5a0e963e3b98"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e4493c8-b1a9-4d33-8e6c-6cf0208cb457"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ccb0d1a6-ebf0-4d3c-96b4-574f655e6118"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""665f0d15-495f-4f9b-9ebc-32892517e6ba"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c547aa71-bee3-4c34-9375-20728d1a47a6"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f2914aa-7982-4c6f-a560-a3669d76f773"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot Aim With Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cbd802c1-feda-4cb8-9333-95bb7b7a512b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Melee"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""84fd1e67-87b7-4743-aa51-211bccbe8eae"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Melee"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d9939ca6-45f9-4003-a4a1-d3d95a96d489"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Version Switch Minor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c95d046f-6afa-4c20-a9f2-138e5fe9cf36"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Version Switch Minor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5549f31f-3ad9-4758-a549-f592f9c34df6"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Version Switch Major"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e92f7d44-da31-45d6-8ca5-a00d377553c0"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Version Switch Major"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Map
        m_Map = asset.FindActionMap("Map", throwIfNotFound: true);
        m_Map_MoveWalk = m_Map.FindAction("Move Walk", throwIfNotFound: true);
        m_Map_MoveJump = m_Map.FindAction("Move Jump", throwIfNotFound: true);
        m_Map_Shoot = m_Map.FindAction("Shoot", throwIfNotFound: true);
        m_Map_ShootAim = m_Map.FindAction("Shoot Aim", throwIfNotFound: true);
        m_Map_ShootAimWithJoystick = m_Map.FindAction("Shoot Aim With Joystick", throwIfNotFound: true);
        m_Map_Melee = m_Map.FindAction("Melee", throwIfNotFound: true);
        m_Map_VersionSwitchMinor = m_Map.FindAction("Version Switch Minor", throwIfNotFound: true);
        m_Map_VersionSwitchMajor = m_Map.FindAction("Version Switch Major", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Map
    private readonly InputActionMap m_Map;
    private IMapActions m_MapActionsCallbackInterface;
    private readonly InputAction m_Map_MoveWalk;
    private readonly InputAction m_Map_MoveJump;
    private readonly InputAction m_Map_Shoot;
    private readonly InputAction m_Map_ShootAim;
    private readonly InputAction m_Map_ShootAimWithJoystick;
    private readonly InputAction m_Map_Melee;
    private readonly InputAction m_Map_VersionSwitchMinor;
    private readonly InputAction m_Map_VersionSwitchMajor;
    public struct MapActions
    {
        private @Control m_Wrapper;
        public MapActions(@Control wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveWalk => m_Wrapper.m_Map_MoveWalk;
        public InputAction @MoveJump => m_Wrapper.m_Map_MoveJump;
        public InputAction @Shoot => m_Wrapper.m_Map_Shoot;
        public InputAction @ShootAim => m_Wrapper.m_Map_ShootAim;
        public InputAction @ShootAimWithJoystick => m_Wrapper.m_Map_ShootAimWithJoystick;
        public InputAction @Melee => m_Wrapper.m_Map_Melee;
        public InputAction @VersionSwitchMinor => m_Wrapper.m_Map_VersionSwitchMinor;
        public InputAction @VersionSwitchMajor => m_Wrapper.m_Map_VersionSwitchMajor;
        public InputActionMap Get() { return m_Wrapper.m_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActions set) { return set.Get(); }
        public void SetCallbacks(IMapActions instance)
        {
            if (m_Wrapper.m_MapActionsCallbackInterface != null)
            {
                @MoveWalk.started -= m_Wrapper.m_MapActionsCallbackInterface.OnMoveWalk;
                @MoveWalk.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnMoveWalk;
                @MoveWalk.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnMoveWalk;
                @MoveJump.started -= m_Wrapper.m_MapActionsCallbackInterface.OnMoveJump;
                @MoveJump.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnMoveJump;
                @MoveJump.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnMoveJump;
                @Shoot.started -= m_Wrapper.m_MapActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnShoot;
                @ShootAim.started -= m_Wrapper.m_MapActionsCallbackInterface.OnShootAim;
                @ShootAim.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnShootAim;
                @ShootAim.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnShootAim;
                @ShootAimWithJoystick.started -= m_Wrapper.m_MapActionsCallbackInterface.OnShootAimWithJoystick;
                @ShootAimWithJoystick.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnShootAimWithJoystick;
                @ShootAimWithJoystick.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnShootAimWithJoystick;
                @Melee.started -= m_Wrapper.m_MapActionsCallbackInterface.OnMelee;
                @Melee.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnMelee;
                @Melee.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnMelee;
                @VersionSwitchMinor.started -= m_Wrapper.m_MapActionsCallbackInterface.OnVersionSwitchMinor;
                @VersionSwitchMinor.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnVersionSwitchMinor;
                @VersionSwitchMinor.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnVersionSwitchMinor;
                @VersionSwitchMajor.started -= m_Wrapper.m_MapActionsCallbackInterface.OnVersionSwitchMajor;
                @VersionSwitchMajor.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnVersionSwitchMajor;
                @VersionSwitchMajor.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnVersionSwitchMajor;
            }
            m_Wrapper.m_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveWalk.started += instance.OnMoveWalk;
                @MoveWalk.performed += instance.OnMoveWalk;
                @MoveWalk.canceled += instance.OnMoveWalk;
                @MoveJump.started += instance.OnMoveJump;
                @MoveJump.performed += instance.OnMoveJump;
                @MoveJump.canceled += instance.OnMoveJump;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @ShootAim.started += instance.OnShootAim;
                @ShootAim.performed += instance.OnShootAim;
                @ShootAim.canceled += instance.OnShootAim;
                @ShootAimWithJoystick.started += instance.OnShootAimWithJoystick;
                @ShootAimWithJoystick.performed += instance.OnShootAimWithJoystick;
                @ShootAimWithJoystick.canceled += instance.OnShootAimWithJoystick;
                @Melee.started += instance.OnMelee;
                @Melee.performed += instance.OnMelee;
                @Melee.canceled += instance.OnMelee;
                @VersionSwitchMinor.started += instance.OnVersionSwitchMinor;
                @VersionSwitchMinor.performed += instance.OnVersionSwitchMinor;
                @VersionSwitchMinor.canceled += instance.OnVersionSwitchMinor;
                @VersionSwitchMajor.started += instance.OnVersionSwitchMajor;
                @VersionSwitchMajor.performed += instance.OnVersionSwitchMajor;
                @VersionSwitchMajor.canceled += instance.OnVersionSwitchMajor;
            }
        }
    }
    public MapActions @Map => new MapActions(this);
    public interface IMapActions
    {
        void OnMoveWalk(InputAction.CallbackContext context);
        void OnMoveJump(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnShootAim(InputAction.CallbackContext context);
        void OnShootAimWithJoystick(InputAction.CallbackContext context);
        void OnMelee(InputAction.CallbackContext context);
        void OnVersionSwitchMinor(InputAction.CallbackContext context);
        void OnVersionSwitchMajor(InputAction.CallbackContext context);
    }
}
